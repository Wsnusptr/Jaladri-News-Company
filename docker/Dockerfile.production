# Multi-stage Dockerfile for production
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files
COPY package.json pnpm-lock.yaml ./
COPY packages/db/package.json ./packages/db/
COPY apps/web/package.json ./apps/web/
COPY apps/cms/package.json ./apps/cms/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Copy environment file
COPY .env.example .env

# Generate Prisma client
RUN pnpm prisma:generate

# Build apps
RUN pnpm build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built applications
COPY --from=builder /app/apps/web/.next/standalone ./web/
COPY --from=builder /app/apps/cms/.next/standalone ./cms/
COPY --from=builder /app/apps/web/.next/static ./web/.next/static
COPY --from=builder /app/apps/cms/.next/static ./cms/.next/static
COPY --from=builder /app/apps/web/public ./web/public
COPY --from=builder /app/apps/cms/public ./cms/public

# Copy package files and node_modules
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/packages ./packages
COPY --from=builder /app/package.json ./
COPY --from=builder /app/ecosystem.config.js ./

RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000 3001

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Install PM2
USER root
RUN npm install -g pm2
USER nextjs

CMD ["pm2-runtime", "start", "ecosystem.config.js"]
